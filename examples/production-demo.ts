import { config } from 'dotenv';
import { LangfusePromptSDK } from '../src/sdk';

// Load environment variables
config();

async function productionDemo() {
  console.log('üéØ Langfuse Prompt Management System - Production Demo');
  console.log('===================================================');

  const sdk = new LangfusePromptSDK({ autoConnect: false });

  try {
    await sdk.connect();
    console.log('‚úÖ Connected to Langfuse server');

    // Demo 1: Template with Default Values
    console.log('\nüìß Demo 1: Creating and rendering a template with default values');
    console.log('----------------------------------------------------------------');
    
    const emailTemplate = await sdk.createTemplate(
      `email-demo-${Date.now()}`,
      'Dear {{name}},\n\n{{message}}\n\nBest regards,\n{{sender}}',
      {
        description: 'Professional email template',
        tags: ['email', 'professional'],
        syntax: 'simple',
        defaultValues: {
          sender: 'Customer Support Team',
          message: 'Thank you for contacting us.'
        }
      }
    );

    console.log('‚úÖ Template created:', emailTemplate.name);
    console.log('   Variables:', emailTemplate.variables);
    console.log('   Default values:', emailTemplate.defaultValues);

    // Render with partial variables (should use defaults)
    const rendered1 = await sdk.renderTemplate(emailTemplate.id, {
      name: 'Alice Johnson'
    });

    console.log('\nüé® Rendered with defaults:');
    console.log('---');
    console.log(rendered1.rendered);
    console.log('---');
    console.log('Used variables:', rendered1.usedVariables);
    console.log('Missing variables:', rendered1.missingVariables);

    // Render with all variables (should override defaults)
    const rendered2 = await sdk.renderTemplate(emailTemplate.id, {
      name: 'Bob Smith',
      message: 'Your order has been shipped and will arrive tomorrow.',
      sender: 'Shipping Department'
    });

    console.log('\nüé® Rendered with overrides:');
    console.log('---');
    console.log(rendered2.rendered);
    console.log('---');

    // Demo 2: Prompt Creation (will show Langfuse integration)
    console.log('\nüìù Demo 2: Creating a prompt in Langfuse');
    console.log('------------------------------------------');
    
    try {
      const prompt = await sdk.createPrompt(
        `greeting-demo-${Date.now()}`,
        'Hello {{name}}! Welcome to {{platform}}. How can I assist you today?',
        {
          description: 'Customer service greeting',
          tags: ['greeting', 'customer-service'],
          variables: { name: 'string', platform: 'string' }
        }
      );

      console.log('‚úÖ Prompt created successfully');
      console.log('   Name:', prompt.name);
      console.log('   ID:', prompt.id || 'Generated by Langfuse');
      console.log('   Version:', prompt.version);
    } catch (error) {
      console.log('‚ÑπÔ∏è  Prompt creation note:', (error as Error).message);
      console.log('   (This is expected with the current Langfuse SDK behavior)');
    }

    // Demo 3: Chain Creation and Execution
    console.log('\nüîó Demo 3: Creating and executing a workflow chain');
    console.log('--------------------------------------------------');

    const workflowChain = await sdk.createChain(
      `workflow-demo-${Date.now()}`,
      [
        {
          name: 'email-step',
          type: 'template',
          resourceId: emailTemplate.id
        }
      ],
      {
        description: 'Customer communication workflow',
        tags: ['workflow', 'customer-service'],
        executionOrder: 'sequential'
      }
    );

    console.log('‚úÖ Chain created:', workflowChain.name);
    console.log('   Steps:', workflowChain.steps.length);

    const execution = await sdk.executeChain(workflowChain.id, {
      name: 'Carol Davis',
      message: 'Welcome to our premium service! We are excited to have you on board.'
    });

    console.log('‚úÖ Chain executed successfully');
    console.log('   Status:', execution.status);
    console.log('   Steps completed:', execution.stepResults.length);

    // Demo 4: System Analytics
    console.log('\nüìä Demo 4: System analytics and insights');
    console.log('---------------------------------------');

    const stats = await sdk.getSystemStats();
    console.log('System Overview:');
    console.log('  üìù Prompts:', stats.overview.totalPrompts);
    console.log('  üìß Templates:', stats.overview.totalTemplates);
    console.log('  üîó Chains:', stats.overview.totalChains);
    console.log('  üë• Authors:', stats.overview.uniqueAuthors);
    console.log('  üè• Health:', stats.systemHealth.status);

    if (stats.overview.totalTemplates > 0) {
      console.log('\nMost used tags:');
      stats.overview.mostUsedTags.slice(0, 3).forEach((tag, i) => {
        console.log(`  ${i + 1}. ${tag.tag} (${tag.count} uses)`);
      });
    }

    // Demo 5: Search and Discovery
    console.log('\nüîç Demo 5: Search and discovery');
    console.log('-------------------------------');

    const searchResults = await sdk.globalSearch('demo');
    console.log('Search results for "demo":');
    console.log('  üìù Prompts:', searchResults.prompts.length);
    console.log('  üìß Templates:', searchResults.templates.length);
    console.log('  üîó Chains:', searchResults.chains.length);

    if (searchResults.templates.length > 0) {
      console.log('\nFound templates:');
      searchResults.templates.forEach(template => {
        console.log(`  - ${template.name} (${template.tags.join(', ')})`);
      });
    }

    console.log('\nüéâ Production demo completed successfully!');
    console.log('The system is ready for production use with your Langfuse server.');

  } catch (error) {
    console.error('‚ùå Demo failed:', error);
  } finally {
    await sdk.disconnect();
    console.log('\nüëã Disconnected from Langfuse');
  }
}

if (require.main === module) {
  productionDemo().catch(console.error);
}

export { productionDemo };
